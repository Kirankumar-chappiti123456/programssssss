selection sort

#include <stdio.h>
#include<stdlib.h>

int main()
{
    int a[]={111,2,11,55,44,1,12,122};
    int l=sizeof(a)/sizeof(a[0]),i=0,j=0;
    for(i=0;i<l-1;i++)
    {
        for(j=i+1;j<l-1;j++)
        {
            if(a[i]>a[j])
            {
                int temp=a[i];
                a[i]=a[j];
                a[j]=temp;
                
            }
        }
    }
    for(i=0;i<l;i++)
    {
        printf(" %d ",a[i]);
    }
}


bubble sortr:

#include <stdio.h>
#include<stdlib.h>
int main()
{
    int a[]={111,2,11,55,44,1,12,122};
    int l=sizeof(a)/sizeof(a[0]),i=0,j=0;
    for(i=0;i<l-1;i++)
    {
        for(j=0;j<l-1-i;j++)
        {
            if(a[j]>a[j+1])
            {
                int temp=a[j];
                a[j]=a[j+1];
                a[j+1]=temp;
                
            }
        }
    }
    for(i=0;i<l;i++)
    {
        printf(" %d ",a[i]);
    }
}


insertion sort:
#include <stdio.h>
#include<stdlib.h>
int main()
{
    int a[]={111,2,11,55,44,1,12,122};
    int l=sizeof(a)/sizeof(a[0]),i=0,j=0;
    for(i=1;i<l;i++)
    {
        int t=a[i];
        for(j=i-1;((j>=0)&&(t<a[j]));j--)
        {
            a[j+1]=a[j];
        }
        a[j+1]=t;
    }
    for(i=0;i<l;i++)
    {
        printf("%d  ",a[i]);
    }
}






insert at beg:



#include<stdio.h>
#include<stdlib.h>
struct node 
{
    int data;
    struct node*next;
};


struct node *insert(struct node *head)
{
    struct node *temp=malloc(sizeof(struct node));
    temp->data=50;
    temp->next=head;
    head=temp;
    return head;
}


int main()
{
struct node*head=NULL;
struct node *p;
struct node *p1=(struct node*)malloc(sizeof(struct node));
p1->data=10;
p1->next=NULL;
head=p1;


struct node *p2=(struct node*)malloc(sizeof(struct node));
p2->data=20;
p1->next=p2;

struct node *p3=(struct node*)malloc(sizeof(struct node));
p3->data=30;
p2->next=p3;

struct node *p4=(struct node*)malloc(sizeof(struct node));
p4->data=40;
p3->next=p4;
p4->next=NULL;


head=insert(head);
p=head;
while(p!=NULL)
{
    printf(" %d ",p->data);
    p=p->next;
}

}







insert at end:


#include<stdio.h>
#include<stdlib.h>
struct node 
{
    int data;
    struct node*next;
};


struct node *insert(struct node *head)
{
    struct node *k=head;
    struct node *temp=malloc(sizeof(struct node));
    temp->data=50;
    temp->next=NULL;
    while(k->next!=NULL)
    {
        k=k->next;
    }
    k->next=temp;
    return head;
}


int main()
{
struct node*head=NULL;
struct node *p;
struct node *p1=(struct node*)malloc(sizeof(struct node));
p1->data=10;
p1->next=NULL;
head=p1;


struct node *p2=(struct node*)malloc(sizeof(struct node));
p2->data=20;
p1->next=p2;

struct node *p3=(struct node*)malloc(sizeof(struct node));
p3->data=30;
p2->next=p3;

struct node *p4=(struct node*)malloc(sizeof(struct node));
p4->data=40;
p3->next=p4;
p4->next=NULL;


head=insert(head);
p=head;
while(p!=NULL)
{
    printf(" %d ",p->data);
    p=p->next;
}

}
            


add at middle

#include<stdio.h>
#include<stdlib.h>
struct node 
{
    int data;
    struct node*next;
};


struct node *insert(struct node *head)
{
    int pos=2;
    struct node *k=head;
    struct node *temp=malloc(sizeof(struct node));
    temp->data=50;
    temp->next=NULL;
    pos--;
    while(pos!=1)
    {
        k=k->next;
        pos--;
    }
    temp->next=k->next;
    k->next=temp;
    return head;
}


int main()
{
struct node*head=NULL;
struct node *p;
struct node *p1=(struct node*)malloc(sizeof(struct node));
p1->data=10;
p1->next=NULL;
head=p1;


struct node *p2=(struct node*)malloc(sizeof(struct node));
p2->data=20;
p1->next=p2;

struct node *p3=(struct node*)malloc(sizeof(struct node));
p3->data=30;
p2->next=p3;

struct node *p4=(struct node*)malloc(sizeof(struct node));
p4->data=40;
p3->next=p4;
p4->next=NULL;


head=insert(head);
p=head;
while(p!=NULL)
{
    printf(" %d ",p->data);
    p=p->next;
}

}


deletion of alternate node:
#include<stdio.h>
#include<stdlib.h>

struct node
{
    int data;
    struct node *next;
};
struct node *deletealt(struct node*head)
{
    struct node *temp,*new;
    temp=new=head;
    temp=temp->next;
    while(new!=NULL && new->next!=NULL)
    {
        new->next=temp->next;
        free(temp);
        new=new->next;
        if(new!=NULL)
        {
            temp=new->next;
        }
    }
    // while(head!=NULL)
    // {
    //     printf("%d ",head->data);
    //     head=head->next;
    // }
    return head;
}
int main()
{
  struct node *head=NULL;
  struct node *p;
  
  struct node *p1=malloc(sizeof(struct node));
  p1->data=10;
  p1->next=NULL;
  head=p1;
  
  struct node *p2=malloc(sizeof(struct node));
  p2->data=20;
  p1->next=p2;
  
  
  struct node *p3=malloc(sizeof(struct node));
  p3->data=30;
  p2->next=p3;
  
  struct node *p4=malloc(sizeof(struct node));
  p4->data=40;
  p3->next=p4;
  p4->next=NULL;
  
  head=deletealt(head);
 // deletealt(head);
  p=head;
  while(p!=NULL)
  {
      printf("%d ",p->data);
      p=p->next;
  }
}
  
